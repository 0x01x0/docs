(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{383:function(e,t,n){"use strict";n.r(t);var i=n(4),o=Object(i.a)({},(function(){var e=this.$createElement,t=this._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('$ docker run --rm containrrr/watchtower -h\n\nWatchtower automatically updates running Docker containers whenever a new image is released.\nMore information available at https://github.com/containrrr/watchtower/.\n\nUsage:\n  watchtower [flags]\n\nFlags:\n  -a, --api-version string                          api version to use by docker client (default "1.24")\n  -c, --cleanup                                     remove previously used images after updating\n  -d, --debug                                       enable debug mode with verbose logging\n      --enable-lifecycle-hooks                      Enable the execution of commands triggered by pre- and post-update lifecycle hooks\n  -h, --help                                        help for watchtower\n  -H, --host string                                 daemon socket to connect to (default "unix:///var/run/docker.sock")\n  -S, --include-stopped                             Will also include created and exited containers\n  -i, --interval int                                poll interval (in seconds) (default 300)\n  -e, --label-enable                                watch containers where the com.centurylinklabs.watchtower.enable label is true\n  -m, --monitor-only                                Will only monitor for new images, not update the containers\n      --no-pull                                     do not pull any new images\n      --no-restart                                  do not restart any containers\n      --notification-email-delay int                Delay before sending notifications, expressed in seconds\n      --notification-email-from string              Address to send notification emails from\n      --notification-email-server string            SMTP server to send notification emails through\n      --notification-email-server-password string   SMTP server password for sending notifications\n      --notification-email-server-port int          SMTP server port to send notification emails through (default 25)\n      --notification-email-server-tls-skip-verify\n                                                    Controls whether watchtower verifies the SMTP server\'s certificate chain and host name.\n                                                    Should only be used for testing.\n\n      --notification-email-server-user string       SMTP server user for sending notifications\n      --notification-email-subjecttag string        Subject prefix tag for notifications via mail\n      --notification-email-to string                Address to send notification emails to\n      --notification-gotify-token string            The Gotify Application required to query the Gotify API\n      --notification-gotify-url string              The Gotify URL to send notifications to\n      --notification-msteams-data                   The MSTeams notifier will try to extract log entry fields as MSTeams message facts\n      --notification-msteams-hook string            The MSTeams WebHook URL to send notifications to\n      --notification-slack-channel string           A string which overrides the webhook\'s default channel. Example: #my-custom-channel\n      --notification-slack-hook-url string          The Slack Hook URL to send notifications to\n      --notification-slack-icon-emoji string        An emoji code string to use in place of the default icon\n      --notification-slack-icon-url string          An icon image URL string to use in place of the default icon\n      --notification-slack-identifier string        A string which will be used to identify the messages coming from this watchtower instance (default "watchtower")\n  -n, --notifications strings                        notification types to send (valid: email, slack, msteams, gotify)\n      --notifications-level string                  The log level used for sending notifications. Possible values: panic, fatal, error, warn, info or debug (default "info")\n      --remove-volumes                              remove attached volumes before updating\n      --revive-stopped                              Will also start stopped containers that were updated, if include-stopped is active\n  -R, --run-once                                    Run once now and exit\n  -s, --schedule string                             the cron expression which defines when to update\n  -t, --stop-timeout duration                       timeout before a container is forcefully stopped (default 10s)\n  -v, --tlsverify                                   use TLS and verify the remote\n')])])])])}),[],!1,null,null,null);t.default=o.exports}}]);